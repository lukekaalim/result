// @flow strict

export type Success<TSuccess> = {
  type: 'success',
  success: TSuccess,
};
export type Failure<TFailure> = {
  type: 'failure',
  failure: TFailure,
}
export type Result<TSuccess, TFailure> =
  | Failure<TFailure>
  | Success<TSuccess>;

declare export function succeed<S>(value: S): Success<S>;
declare export function fail<F>(value: F): Failure<F>;

type Chain<S, F> = {
  catch: <RS, RF>(reject: (failure: F) => Result<RS, RF>) => Chain<RS, RF> | Chain<S, empty>,
  then: <RS, RF>(resolve: (success: S) => Result<RS, RF>) => Chain<RS, RF> | Chain<empty, F>,
  result:  () => Result<S, F>,
};

declare export function chain<S, F>(result: Result<S, F>): Chain<S, F>;

declare export function handle<S, F, SR, FR>(result: Result<S, F>, onSuccess: S => SR, onFailure: F => FR): SR | FR;